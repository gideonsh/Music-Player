[{"C:\\Users\\gideo\\Desktop\\home_test\\src\\index.js":"1","C:\\Users\\gideo\\Desktop\\home_test\\src\\App.js":"2","C:\\Users\\gideo\\Desktop\\home_test\\src\\components\\MultiPlayer.js":"3","C:\\Users\\gideo\\Desktop\\home_test\\src\\components\\Player.js":"4","C:\\Users\\gideo\\Desktop\\home_test\\src\\components\\PlayButton.js":"5","C:\\Users\\gideo\\Desktop\\home_test\\src\\components\\SessionButton.js":"6","C:\\Users\\gideo\\Desktop\\home_test\\src\\components\\RecordButton.js":"7","C:\\Users\\gideo\\Desktop\\home_test\\src\\components\\StopButton.js":"8"},{"size":142,"mtime":1616594953000,"results":"9","hashOfConfig":"10"},{"size":4639,"mtime":1629896760777,"results":"11","hashOfConfig":"10"},{"size":10418,"mtime":1629888512262,"results":"12","hashOfConfig":"10"},{"size":328,"mtime":1629794815019,"results":"13","hashOfConfig":"10"},{"size":492,"mtime":1629897616905,"results":"14","hashOfConfig":"10"},{"size":1772,"mtime":1629897659716,"results":"15","hashOfConfig":"10"},{"size":1229,"mtime":1629896658545,"results":"16","hashOfConfig":"10"},{"size":492,"mtime":1629897609264,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"pfbnvk",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\gideo\\Desktop\\home_test\\src\\index.js",[],["38","39"],"C:\\Users\\gideo\\Desktop\\home_test\\src\\App.js",["40","41"],"import React, { Component, useState } from \"react\";\nimport classes from \"./App.module.css\";\nimport MultiPlayer from \"./components/MultiPlayer\";\nimport PlayButton from \"./components/PlayButton\";\nimport StopButton from \"./components/StopButton\";\nimport RecordButton from \"./components/RecordButton\";\nimport SessionButton from \"./components/SessionButton\";\nimport Background from \"./assets/background.png\";\n\nfunction App() {\n  const [playIsOn, setPlayIsOn] = useState(false);\n  const [recordIsOn, setRecordIsOn] = useState(false);\n  const [sessionIsOn, setSessionIsOn] = useState(false);\n  const [showSession, setShowSession] = useState(false);\n  const [recordExist, setRecordExist] = useState(false);\n\n  const playMusicHandler = () => {\n    setPlayIsOn(true);\n  };\n\n  const stopMusicHandler = () => {\n    setPlayIsOn(false);\n  };\n\n  const showPlaySessionHandler = () => {\n    setRecordIsOn(true);\n  };\n\n  const hidePlaySessionHandler = () => {\n    {\n      !showSession && showSessionButton();\n    }\n    setRecordExist(true);\n    setRecordIsOn(false);\n  };\n\n  const playSessionHandler = () => {\n    setSessionIsOn(true);\n  };\n\n  const stopSessionHandler = () => {\n    setSessionIsOn(false);\n  };\n\n  const showSessionButton = () => {\n    setShowSession(true);\n  };\n\n  return (\n    <div\n      style={{\n        backgroundImage: `url(${Background})`,\n        backgroundPosition: \"center\",\n        backgroundSize: \"cover\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n    >\n      <h1 className={classes.title}>Music Player</h1>\n      <div>\n        <div className={classes.header}>\n          <PlayButton\n            name=\"play\"\n            state={playIsOn}\n            sessionState={sessionIsOn}\n            onClick={playMusicHandler}\n          />\n          <StopButton\n            name=\"stop\"\n            state={playIsOn}\n            sessionState={sessionIsOn}\n            onClick={stopMusicHandler}\n          />\n        </div>\n        <div className={classes.header}>\n          <RecordButton\n            name=\"record\"\n            state={recordIsOn}\n            playState={playIsOn}\n            sessionState={sessionIsOn}\n            onShowSession={showPlaySessionHandler}\n            onHideSession={hidePlaySessionHandler}\n          />\n          {showSession && (\n            <SessionButton\n              name=\"session\"\n              state={sessionIsOn}\n              playState={playIsOn}\n              recordState={recordIsOn}\n              recordExist={recordExist}\n              onPlaySession={playSessionHandler}\n              onStopSession={stopSessionHandler}\n            />\n          )}\n        </div>\n      </div>\n      <MultiPlayer\n        playIsOn={playIsOn}\n        recordIsOn={recordIsOn}\n        sessionIsOn={sessionIsOn}\n        recordExist={recordExist}\n        urls={[\n          //\"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\",\n          //\"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3\",\n          //\"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3\",\n          \"https://firebasestorage.googleapis.com/v0/b/moveo-home-test.appspot.com/o/SilentStar_120_Em_OrganSynth.mp3?alt=media&token=33ab3637-ac35-4926-9470-8fd47b6ced7d\",\n          \"https://firebasestorage.googleapis.com/v0/b/moveo-home-test.appspot.com/o/electric%20guitar%20coutry%20slide%20120bpm%20-%20B.mp3?alt=media&token=9d453b70-c000-46d6-a69f-f2865db4c7bb\",\n          \"https://firebasestorage.googleapis.com/v0/b/moveo-home-test.appspot.com/o/PAS3GROOVE1.03B.mp3?alt=media&token=cbbb15fd-d0ee-4a68-bf11-448fc9b4f3e9\",\n          \"https://firebasestorage.googleapis.com/v0/b/moveo-home-test.appspot.com/o/MazePolitics_120_Perc.mp3?alt=media&token=66f05452-0ce9-4ec4-a439-d150fc4f7685\",\n          \"https://firebasestorage.googleapis.com/v0/b/moveo-home-test.appspot.com/o/GrooveB_120bpm_Tanggu.mp3?alt=media&token=29127b07-390d-49ba-817e-dc99e03fdd5e\",\n          \"https://firebasestorage.googleapis.com/v0/b/moveo-home-test.appspot.com/o/FUD_120_StompySlosh.mp3?alt=media&token=412b750c-82f2-4611-abed-01fade007f9b\",\n          \"https://firebasestorage.googleapis.com/v0/b/moveo-home-test.appspot.com/o/Bass%20Warwick%20heavy%20funk%20groove%20on%20E%20120%20BPM.mp3?alt=media&token=33e94afc-b3a7-428a-acc2-f302f3662dfb\",\n          \"https://firebasestorage.googleapis.com/v0/b/moveo-home-test.appspot.com/o/120_stutter_breakbeats_16.mp3?alt=media&token=a73633d5-a5ff-4197-a3d7-1f355e1a5369\",\n          \"https://firebasestorage.googleapis.com/v0/b/moveo-home-test.appspot.com/o/120_future_funk_beats_25.mp3?alt=media&token=394a9abe-49b1-4516-9daa-14d8fdb43e7e\",\n        ]}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\gideo\\Desktop\\home_test\\src\\components\\MultiPlayer.js",["42","43","44","45","46","47","48","49","50","51"],"import React, { useState, useEffect } from \"react\";\r\nimport classes from \"./MultiPlayer.module.css\";\r\nimport Player from \"./Player\";\r\nimport silentStar from \"../assets/silentStar.png\";\r\nimport bass from \"../assets/bass.png\";\r\nimport darboka from \"../assets/darboka.png\";\r\nimport drums from \"../assets/drums.png\";\r\nimport electricGuitar from \"../assets/electricGuitar.png\";\r\nimport electronics from \"../assets/electronics.png\";\r\nimport groove1 from \"../assets/groove1.png\";\r\nimport keyboards from \"../assets/keyboards.png\";\r\nimport lowVoice from \"../assets/lowVoice.png\";\r\n\r\nconst useMultiAudio = (\r\n  urls,\r\n  playIsOn,\r\n  recordIsOn,\r\n  sessionIsOn,\r\n  recordExist\r\n) => {\r\n  const [isPlayButtonOn, setIsPlayButtonOn] = useState(false);\r\n  const [numberOfLoopsLeft, setNumberOfLoopsLeft] = useState(0);\r\n  const [recordStarted, setRecordStarted] = useState(false);\r\n  const [sessionStarted, setSessionStarted] = useState(false);\r\n  const [sessionStartTime, setSessionStartTime] = useState(0);\r\n\r\n  const [records, setRecords] = useState([]);\r\n  let amountInRecords = 0;\r\n\r\n  const [sources] = useState(\r\n    urls.map((url) => {\r\n      return {\r\n        url,\r\n        audio: new Audio(url),\r\n      };\r\n    })\r\n  );\r\n\r\n  const [players, setPlayers] = useState([\r\n    {\r\n      instroment: \"SilentStar\",\r\n      check: false,\r\n      playing: false,\r\n      startTime: 0,\r\n      duration: 0,\r\n    },\r\n    {\r\n      instroment: \"Electric Guitar\",\r\n      check: false,\r\n      playing: false,\r\n      startTime: 0,\r\n      duration: 0,\r\n    },\r\n    {\r\n      instroment: \"PAS3GROOVE1\",\r\n      check: false,\r\n      playing: false,\r\n      startTime: 0,\r\n      duration: 0,\r\n    },\r\n    {\r\n      instroment: \"MazePolitics\",\r\n      check: false,\r\n      playing: false,\r\n      startTime: 0,\r\n      duration: 0,\r\n    },\r\n    {\r\n      instroment: \"GrooveB\",\r\n      check: false,\r\n      playing: false,\r\n      startTime: 0,\r\n      duration: 0,\r\n    },\r\n    {\r\n      instroment: \"FUD_120\",\r\n      check: false,\r\n      playing: false,\r\n      startTime: 0,\r\n      duration: 0,\r\n    },\r\n    {\r\n      instroment: \"Bass\",\r\n      check: false,\r\n      playing: false,\r\n      startTime: 0,\r\n      duration: 0,\r\n    },\r\n    {\r\n      instroment: \"stutter\",\r\n      check: false,\r\n      playing: false,\r\n      startTime: 0,\r\n      duration: 0,\r\n    },\r\n    {\r\n      instroment: \"future_funk\",\r\n      check: false,\r\n      playing: false,\r\n      startTime: 0,\r\n      duration: 0,\r\n    },\r\n  ]);\r\n\r\n  // Change the state of instroment that was clicked\r\n  const toggle = (targetIndex) => () => {\r\n    const newPlayers = [...players];\r\n    if (newPlayers[targetIndex].playing === false) {\r\n      newPlayers[targetIndex].playing = true;\r\n    } else {\r\n      newPlayers[targetIndex].playing = false;\r\n    }\r\n\r\n    setPlayers(newPlayers);\r\n  };\r\n\r\n  // Plays the on instroments in every repeted loop\r\n  useEffect(() => {\r\n    const newRecords = [...records];\r\n    if (playIsOn) {\r\n      const interval = setInterval(() => {\r\n        sources.forEach((source, i) => {\r\n          if (players[i].playing) {\r\n            source.audio.load();\r\n            source.audio.play();\r\n            if (recordIsOn) {\r\n              records.forEach((record, j) => {\r\n                if (record.originKey === i) {\r\n                  newRecords.push({\r\n                    originKey: record.originKey,\r\n                    recordKey: record.recordKey,\r\n                    audio: record.audio,\r\n                    startTime: record.startTime,\r\n                    lastUpdate: Date.now(),\r\n                    duration:\r\n                      record.duration + (Date.now() - record.lastUpdate),\r\n                  });\r\n                }\r\n              });\r\n              setRecordStarted(true);\r\n            }\r\n          } else {\r\n            source.audio.pause();\r\n            if (recordIsOn) {\r\n              records.forEach((record, j) => {\r\n                if (record.originKey === i) {\r\n                  newRecords.push({\r\n                    originKey: record.originKey,\r\n                    recordKey: record.recordKey,\r\n                    audio: record.audio,\r\n                    startTime: record.startTime,\r\n                    lastUpdate: Date.now(),\r\n                    duration:\r\n                      record.duration + (Date.now() - record.lastUpdate),\r\n                  });\r\n                }\r\n              });\r\n              setRecordStarted(true);\r\n            }\r\n          }\r\n        });\r\n      }, 8000);\r\n      return () => clearInterval(interval);\r\n    } else {\r\n      sources.forEach((source, i) => {\r\n        source.audio.pause();\r\n        if (recordIsOn) {\r\n          records.forEach((record, j) => {\r\n            if (record.originKey === i) {\r\n              newRecords.push({\r\n                originKey: record.originKey,\r\n                recordKey: record.recordKey,\r\n                audio: record.audio,\r\n                startTime: record.startTime,\r\n                lastUpdate: Date.now(),\r\n                duration: record.duration + (Date.now() - record.lastUpdate),\r\n              });\r\n            }\r\n          });\r\n          setRecordStarted(true);\r\n        }\r\n      });\r\n      setIsPlayButtonOn(false);\r\n    }\r\n    setRecords(newRecords);\r\n  }, [playIsOn]);\r\n\r\n  // Plays the on instroment in the first 8 seconds\r\n  useEffect(() => {\r\n    if (!isPlayButtonOn) {\r\n      if (playIsOn) {\r\n        var newRecord = [];\r\n        sources.forEach((source, i) => {\r\n          if (players[i].playing) {\r\n            source.audio.load();\r\n            source.audio.play();\r\n            if (recordIsOn) {\r\n              amountInRecords = amountInRecords + 1;\r\n              newRecord.push({\r\n                originKey: i,\r\n                recordKey: amountInRecords,\r\n                audio: source.audio,\r\n                startTime: Date.now(),\r\n                lastUpdate: Date.now(),\r\n                duration: 8000,\r\n              });\r\n            }\r\n          } else {\r\n            source.audio.pause();\r\n          }\r\n        });\r\n        setRecordStarted(true);\r\n        setIsPlayButtonOn(true);\r\n        setRecords(newRecord);\r\n      }\r\n    }\r\n  });\r\n\r\n  // Every off toggle the one instroment will stop play imidiatly\r\n  useEffect(() => {\r\n    const newRecords = [...records];\r\n    sources.forEach((source, i) => {\r\n      if (players[i].playing === false) {\r\n        source.audio.pause();\r\n        if (recordIsOn) {\r\n          records.forEach((record, j) => {\r\n            if (record.originKey === i) {\r\n              newRecords.push({\r\n                originKey: record.originKey,\r\n                recordKey: record.recordKey,\r\n                audio: record.audio,\r\n                startTime: record.startTime,\r\n                lastUpdate: Date.now(),\r\n                duration: record.duration + (Date.now() - record.lastUpdate),\r\n              });\r\n            }\r\n          });\r\n          setRecordStarted(true);\r\n        }\r\n      }\r\n      if (recordIsOn) {\r\n        records.forEach((record, j) => {\r\n          if (record.originKey === i) {\r\n            newRecords.push({\r\n              originKey: record.originKey,\r\n              recordKey: record.recordKey,\r\n              audio: record.audio,\r\n              startTime: record.startTime,\r\n              lastUpdate: Date.now(),\r\n              duration: record.duration + (Date.now() - record.lastUpdate),\r\n            });\r\n          }\r\n        });\r\n        setRecordStarted(true);\r\n      }\r\n    });\r\n    setRecords(newRecords);\r\n  }, [players]);\r\n\r\n  // Save the beginning start session time\r\n  useEffect(() => {\r\n    if (sessionIsOn && !sessionStarted) {\r\n      setSessionStartTime(Date.now());\r\n      setSessionStarted(true);\r\n    }\r\n    if (!sessionIsOn) {\r\n      setSessionStarted(false);\r\n    }\r\n  }, [sessionIsOn]);\r\n\r\n  // Play record session\r\n  useEffect(() => {\r\n    if (recordExist && sessionIsOn) {\r\n      records.forEach((record, i) => {\r\n        record.audio.load();\r\n        record.audio.play();\r\n      });\r\n    } else {\r\n      records.forEach((record, i) => {\r\n        record.audio.pause();\r\n      });\r\n    }\r\n  }, [sessionIsOn]);\r\n\r\n  // Plays the on record instroments in every repeted loop\r\n  useEffect(() => {\r\n    if (recordExist) {\r\n      const interval = setInterval(() => {\r\n        if (sessionIsOn) {\r\n          records.forEach((record, i) => {\r\n            record.audio.load();\r\n            record.audio.play();\r\n          });\r\n        } else {\r\n          records.forEach((record, i) => {\r\n            record.audio.pause();\r\n          });\r\n        }\r\n      }, 8000);\r\n      return () => clearInterval(interval);\r\n    }\r\n  });\r\n\r\n  //   useEffect(() => {\r\n  //     if (sessionIsOn) {\r\n  //       const interval = setInterval(() => {\r\n  //         records.forEach((record, i) => {\r\n  //           if (Date.now() >= record.duration + sessionStartTime) {\r\n  //             console.log(\r\n  //               \"now: \" +\r\n  //                 Date.now() +\r\n  //                 \" should stop: \" +\r\n  //                 (record.duration + sessionStartTime) +\r\n  //                 \" duration: \" +\r\n  //                 record.duration\r\n  //             );\r\n  //             record.audio.pause();\r\n  //           }\r\n  //         });\r\n  //       }, 1000);\r\n  //       return () => clearInterval(interval);\r\n  //     }\r\n  //   });\r\n\r\n  return [players, toggle];\r\n};\r\n\r\n// Main function of the script\r\nconst MultiPlayer = (props) => {\r\n  const [players, toggle] = useMultiAudio(\r\n    props.urls,\r\n    props.playIsOn,\r\n    props.recordIsOn,\r\n    props.sessionIsOn,\r\n    props.recordExist\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Player key={0} player={players[0]} toggle={toggle(0)} img={silentStar} />\r\n      <Player\r\n        key={1}\r\n        player={players[1]}\r\n        toggle={toggle(1)}\r\n        img={electricGuitar}\r\n      />\r\n      <Player key={2} player={players[2]} toggle={toggle(2)} img={keyboards} />\r\n      <Player\r\n        key={3}\r\n        player={players[3]}\r\n        toggle={toggle(3)}\r\n        img={electronics}\r\n      />\r\n      <Player key={4} player={players[4]} toggle={toggle(4)} img={darboka} />\r\n      <Player key={5} player={players[5]} toggle={toggle(5)} img={drums} />\r\n      <Player key={6} player={players[6]} toggle={toggle(6)} img={bass} />\r\n      <Player key={7} player={players[7]} toggle={toggle(7)} img={lowVoice} />\r\n      <Player key={8} player={players[8]} toggle={toggle(8)} img={groove1} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MultiPlayer;\r\n","C:\\Users\\gideo\\Desktop\\home_test\\src\\components\\Player.js",["52","53","54"],"import React, { useState, useEffect } from \"react\";\r\nimport classes from \"./Player.module.css\";\r\n\r\nconst Player = ({ player, toggle, img }) => {\r\n  return (\r\n    <button className={classes.pad} onClick={toggle}>\r\n      <img src={img} />\r\n      {player.playing ? \"On\" : \"Off\"}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","C:\\Users\\gideo\\Desktop\\home_test\\src\\components\\PlayButton.js",[],"C:\\Users\\gideo\\Desktop\\home_test\\src\\components\\SessionButton.js",[],"C:\\Users\\gideo\\Desktop\\home_test\\src\\components\\RecordButton.js",[],"C:\\Users\\gideo\\Desktop\\home_test\\src\\components\\StopButton.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":26},{"ruleId":"63","severity":1,"message":"64","line":30,"column":5,"nodeType":"65","messageId":"66","endLine":32,"endColumn":6},{"ruleId":"59","severity":1,"message":"67","line":2,"column":8,"nodeType":"61","messageId":"62","endLine":2,"endColumn":15},{"ruleId":"59","severity":1,"message":"68","line":22,"column":10,"nodeType":"61","messageId":"62","endLine":22,"endColumn":27},{"ruleId":"59","severity":1,"message":"69","line":22,"column":29,"nodeType":"61","messageId":"62","endLine":22,"endColumn":49},{"ruleId":"59","severity":1,"message":"70","line":23,"column":10,"nodeType":"61","messageId":"62","endLine":23,"endColumn":23},{"ruleId":"59","severity":1,"message":"71","line":25,"column":10,"nodeType":"61","messageId":"62","endLine":25,"endColumn":26},{"ruleId":"72","severity":1,"message":"73","line":186,"column":6,"nodeType":"74","endLine":186,"endColumn":16,"suggestions":"75"},{"ruleId":"72","severity":1,"message":"76","line":198,"column":33,"nodeType":"77","endLine":198,"endColumn":52},{"ruleId":"72","severity":1,"message":"78","line":258,"column":6,"nodeType":"74","endLine":258,"endColumn":15,"suggestions":"79"},{"ruleId":"72","severity":1,"message":"80","line":269,"column":6,"nodeType":"74","endLine":269,"endColumn":19,"suggestions":"81"},{"ruleId":"72","severity":1,"message":"82","line":283,"column":6,"nodeType":"74","endLine":283,"endColumn":19,"suggestions":"83"},{"ruleId":"59","severity":1,"message":"84","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":25},{"ruleId":"59","severity":1,"message":"85","line":1,"column":27,"nodeType":"61","messageId":"62","endLine":1,"endColumn":36},{"ruleId":"86","severity":1,"message":"87","line":7,"column":7,"nodeType":"88","endLine":7,"endColumn":24},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'classes' is defined but never used.","'numberOfLoopsLeft' is assigned a value but never used.","'setNumberOfLoopsLeft' is assigned a value but never used.","'recordStarted' is assigned a value but never used.","'sessionStartTime' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'players', 'recordIsOn', 'records', and 'sources'. Either include them or remove the dependency array.","ArrayExpression",["91"],"Assignments to the 'amountInRecords' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","BinaryExpression","React Hook useEffect has missing dependencies: 'recordIsOn', 'records', and 'sources'. Either include them or remove the dependency array.",["92"],"React Hook useEffect has a missing dependency: 'sessionStarted'. Either include it or remove the dependency array.",["93"],"React Hook useEffect has missing dependencies: 'recordExist' and 'records'. Either include them or remove the dependency array.",["94"],"'useState' is defined but never used.","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [playIsOn, players, recordIsOn, records, sources]",{"range":"103","text":"104"},"Update the dependencies array to be: [players, recordIsOn, records, sources]",{"range":"105","text":"106"},"Update the dependencies array to be: [sessionIsOn, sessionStarted]",{"range":"107","text":"108"},"Update the dependencies array to be: [recordExist, records, sessionIsOn]",{"range":"109","text":"110"},[5223,5233],"[playIsOn, players, recordIsOn, records, sources]",[7460,7469],"[players, recordIsOn, records, sources]",[7732,7745],"[sessionIsOn, sessionStarted]",[8056,8069],"[recordExist, records, sessionIsOn]"]